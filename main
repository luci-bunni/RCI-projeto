#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/select.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <string.h>
#include <fcntl.h>
#include <time.h>

#define PORT "58001"
#define UDP_SERVER_IP "193.136.138.142"
#define UDP_SERVER_PORT "59000"
#define MAX_CLIENTS 10
#define BUFFER_SIZE 1024

// Structure to track neighbors
typedef struct {
    int external_neighbor;      // External neighbor's socket
    int safeguard_neighbor;     // External neighbor's external neighbor
    int internal_neighbors[MAX_CLIENTS];  // List of internal neighbors
    int internal_count;         // Number of internal neighbors
    char ip[INET_ADDRSTRLEN];   // Node's IP
    char tcp[6];                // Node's TCP port
    char network[4];            // Network name (3-digit identifier)
} Node;

Node node_info = { .external_neighbor = -1, .safeguard_neighbor = -1, .internal_count = 0 };

// Displays the current topology
void show_topology() {
    printf("\n--- TOPOLOGY ---\n");
    printf("Network: %s\n", node_info.network);
    printf("External Neighbor: %d\n", node_info.external_neighbor);
    printf("Safeguard Neighbor: %d\n", node_info.safeguard_neighbor);
    printf("Internal Neighbors (%d): ", node_info.internal_count);
    for (int i = 0; i < node_info.internal_count; i++) {
        printf("%d ", node_info.internal_neighbors[i]);
    }
    printf("\n----------------\n");
}

// Sends a UDP message to the UDP server
void send_udp_message(const char *message) {
    int udp_fd = socket(AF_INET, SOCK_DGRAM, 0);
    if (udp_fd == -1) {
        perror("UDP socket error");
        return;
    }

    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(atoi(UDP_SERVER_PORT));
    inet_pton(AF_INET, UDP_SERVER_IP, &server_addr.sin_addr);

    if (sendto(udp_fd, message, strlen(message), 0, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        perror("UDP sendto error");
    }

    close(udp_fd);
}

// Receives a UDP message from the UDP server
char* receive_udp_message() {
    int udp_fd = socket(AF_INET, SOCK_DGRAM, 0);
    if (udp_fd == -1) {
        perror("UDP socket error");
        return NULL;
    }

    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(atoi(UDP_SERVER_PORT));
    inet_pton(AF_INET, UDP_SERVER_IP, &server_addr.sin_addr);

    char *buffer = malloc(BUFFER_SIZE);
    if (!buffer) {
        perror("malloc error");
        close(udp_fd);
        return NULL;
    }

    socklen_t addrlen = sizeof(server_addr);
    int n = recvfrom(udp_fd, buffer, BUFFER_SIZE, 0, (struct sockaddr*)&server_addr, &addrlen);
    if (n <= 0) {
        perror("UDP recvfrom error");
        free(buffer);
        close(udp_fd);
        return NULL;
    }

    buffer[n] = '\0';
    close(udp_fd);
    return buffer;
}

// Joins a network by sending a UDP message to the UDP server
void join_network(const char *net) {
    char message[32];
    snprintf(message, sizeof(message), "NODES %s", net);
    send_udp_message(message);

    char *response = receive_udp_message();
    if (!response) {
        printf("Failed to receive response from UDP server.\n");
        return;
    }

    printf("Received response: %s\n", response);

    // Parse the response (NODESLIST net\nIP1 TCP1\nIP2 TCP2\n...)
    char *line = strtok(response, "\n");
    if (!line || strncmp(line, "NODESLIST", 9) != 0) {
        printf("Invalid response format.\n");
        free(response);
        return;
    }

    // Randomly select a node from the list
    srand(time(NULL));
    char *nodes[BUFFER_SIZE];
    int node_count = 0;

    while ((line = strtok(NULL, "\n")) != NULL) {
        nodes[node_count++] = line;
    }

    if (node_count == 0) {
        printf("No nodes available in the network.\n");
        free(response);
        return;
    }

    char *selected_node = nodes[rand() % node_count];
    char ip[INET_ADDRSTRLEN], tcp[6];
    if (sscanf(selected_node, "%s %s", ip, tcp) != 2) {
        printf("Failed to parse node information.\n");
        free(response);
        return;
    }

    printf("Selected node: %s:%s\n", ip, tcp);

    // Connect to the selected node via TCP
    int new_client_fd = socket(AF_INET, SOCK_STREAM, 0);
    if (new_client_fd == -1) {
        perror("TCP socket error");
        free(response);
        return;
    }

    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(atoi(tcp));
    inet_pton(AF_INET, ip, &server_addr.sin_addr);

    if (connect(new_client_fd, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        perror("TCP connect error");
        close(new_client_fd);
        free(response);
        return;
    }

    // Update external neighbor
    node_info.external_neighbor = new_client_fd;
    strcpy(node_info.ip, ip);
    strcpy(node_info.tcp, tcp);
    strcpy(node_info.network, net);

    printf("Connected to external neighbor %s:%s\n", ip, tcp);

    // Send REG message to the UDP server
    char reg_message[128];
    snprintf(reg_message, sizeof(reg_message), "REG %s %s %s", net, ip, tcp);
    send_udp_message(reg_message);

    free(response);
}
    
// Handles user input commands
void handle_input(int *client_fds) {
    char buffer[128];
    int n = read(STDIN_FILENO, buffer, sizeof(buffer) - 1);
    if (n > 0) {
        buffer[n] = '\0';

        char command[16], net[4], connectIP[32], connectTCP[6];
        int parsed = sscanf(buffer, "%15s %3s %31s %5s", command, net, connectIP, connectTCP);

        // Handle "join" command
        if (strcmp(command, "join") == 0 && parsed >= 2) {
            join_network(net);
            return;
        }

        // Handle "show topology" command
        if (strcmp(command, "st") == 0) {
            show_topology();
            return;
        }

        // Handle "direct" command
        if (strcmp(command, "dj") == 0 && parsed >= 4) {
            printf("Joining network %s...\n", net);
            strcpy(node_info.network, net);  // Store network name

            if (strcmp(connectIP, "0.0.0.0") == 0) {
                // Create a new network where this node is its own external neighbor
                printf("Creating new network. This node is its own external neighbor.\n");
                node_info.external_neighbor = -2;  // Special marker for self
                node_info.safeguard_neighbor = -2;
                return;
            }

            printf("Connecting to TCP server at %s:%s on network %s...\n", connectIP, connectTCP, net);

            int new_client_fd = socket(AF_INET, SOCK_STREAM, 0);
            if (new_client_fd == -1) {
                perror("TCP socket error");
                return;
            }

            struct sockaddr_in server_addr;
            memset(&server_addr, 0, sizeof(server_addr));
            server_addr.sin_family = AF_INET;
            server_addr.sin_port = htons(atoi(connectTCP));
            inet_pton(AF_INET, connectIP, &server_addr.sin_addr);

            if (connect(new_client_fd, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
                perror("TCP connect error");
                close(new_client_fd);
                return;
            }

            // Update external neighbor and safeguard
            node_info.external_neighbor = new_client_fd;
            strcpy(node_info.ip, connectIP);
            strcpy(node_info.tcp, connectTCP);

            printf("Connected to external neighbor %s:%s\n", connectIP, connectTCP);

            // Send ENTRY message
            char entry_msg[128];
            snprintf(entry_msg, sizeof(entry_msg), "ENTRY %s %s\n", node_info.ip, node_info.tcp);
            send(new_client_fd, entry_msg, strlen(entry_msg), 0);
            return;
        }

        // If none of the above commands match, print an error message
        printf("Invalid command. Usage:\n");
        printf("  join <net>\n");
        printf("  show topology\n");
        printf("  direct <net> <connectIP> <connectTCP>\n");
    }
}

// Handles TCP messages and updates neighbors
void process_tcp_message(int fd) {
    char buffer[128];
    int n = read(fd, buffer, sizeof(buffer) - 1);
    if (n <= 0) {
        printf("Lost connection to neighbor %d\n", fd);
        close(fd);
        if (node_info.external_neighbor == fd) {
            printf("Reconnecting to safeguard neighbor %d\n", node_info.safeguard_neighbor);
            node_info.external_neighbor = node_info.safeguard_neighbor;
        }
        return;
    }

    buffer[n] = '\0';

    char type[16], ip[32], tcp[6];
    if (sscanf(buffer, "%15s %31s %5s", type, ip, tcp) == 3) {
        if (strcmp(type, "SAFE") == 0) {
            node_info.safeguard_neighbor = fd;
            printf("Updated safeguard neighbor to %s:%s\n", ip, tcp);
        } else if (strcmp(type, "ENTRY") == 0) {
            if (node_info.internal_count < MAX_CLIENTS) {
                node_info.internal_neighbors[node_info.internal_count++] = fd;
                printf("Added internal neighbor %s:%s\n", ip, tcp);

                if (node_info.external_neighbor == -1) {
                    node_info.external_neighbor = fd;
                    printf("Set %s:%s as new external neighbor\n", ip, tcp);

                    char safe_msg[128];
                    snprintf(safe_msg, sizeof(safe_msg), "SAFE %s %s\n", node_info.ip, node_info.tcp);
                    send(fd, safe_msg, strlen(safe_msg), 0);
                }
            }
        }
    }
}

// Accepts new TCP connections
void accept_tcp_connection(int server_fd) {
    struct sockaddr_in client_addr;
    socklen_t addrlen = sizeof(client_addr);
    int new_client_fd = accept(server_fd, (struct sockaddr*)&client_addr, &addrlen);
    if (new_client_fd < 0) {
        perror("accept failed");
        return;
    }

    char client_ip[INET_ADDRSTRLEN];
    inet_ntop(AF_INET, &client_addr.sin_addr, client_ip, sizeof(client_ip));

    printf("New TCP client connected: %s\n", client_ip);

    if (node_info.external_neighbor != -1) {
        char safe_msg[128];
        snprintf(safe_msg, sizeof(safe_msg), "SAFE %s %s\n", node_info.ip, node_info.tcp);
        send(new_client_fd, safe_msg, strlen(safe_msg), 0);
    }

    if (node_info.internal_count < MAX_CLIENTS) {
        node_info.internal_neighbors[node_info.internal_count++] = new_client_fd;
    }
}

int main(void) {
    int tcp_server_fd, udp_fd, maxfd;
    fd_set read_fds;

    tcp_server_fd = socket(AF_INET, SOCK_STREAM, 0);
    udp_fd = socket(AF_INET, SOCK_DGRAM, 0);

    struct sockaddr_in server_addr = {0};
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(atoi(PORT));

    bind(tcp_server_fd, (struct sockaddr*)&server_addr, sizeof(server_addr));
    listen(tcp_server_fd, MAX_CLIENTS);

    maxfd = (tcp_server_fd > udp_fd) ? tcp_server_fd : udp_fd;
    if (STDIN_FILENO > maxfd) maxfd = STDIN_FILENO;

    while (1) {
        FD_ZERO(&read_fds);
        FD_SET(STDIN_FILENO, &read_fds);
        FD_SET(tcp_server_fd, &read_fds);
        FD_SET(udp_fd, &read_fds);
        if (node_info.external_neighbor > 0) FD_SET(node_info.external_neighbor, &read_fds);
        for (int i = 0; i < node_info.internal_count; i++) FD_SET(node_info.internal_neighbors[i], &read_fds);

        int ready = select(maxfd + 1, &read_fds, NULL, NULL, NULL);
        if (ready == -1) {
            perror("select");
            exit(1);
        }

        if (FD_ISSET(STDIN_FILENO, &read_fds)) handle_input(node_info.internal_neighbors);
        if (FD_ISSET(tcp_server_fd, &read_fds)) accept_tcp_connection(tcp_server_fd);
    }

    return 0;
}
